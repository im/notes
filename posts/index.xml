<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on Notes</title>
    <link>http://tangxiaomi.top/notes/posts/</link>
    <description>Recent content in Posts on Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>cn</language>
    <lastBuildDate>Tue, 23 May 2023 00:00:00 +0000</lastBuildDate><atom:link href="http://tangxiaomi.top/notes/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Git 入门指南 🚀</title>
      <link>http://tangxiaomi.top/notes/posts/git/basic/</link>
      <pubDate>Tue, 23 May 2023 00:00:00 +0000</pubDate>
      
      <guid>http://tangxiaomi.top/notes/posts/git/basic/</guid>
      <description>如果你是一个开发者，你一定知道如何使用 Git。Git 是一个版本控制系统，可以帮助我们有效地管理我们的代码和文件。在本文中，我们将介绍 Git 的一些基础知识，以及一些经常使用的 Git 命令。
Git 基础概念 🤔 在开始学习 Git 之前，让我们来了解一些 Git 的基础概念：
 仓库（Repository）：存放你的代码和文件的地方。 分支（Branch）：与主分支不同的版本，可以用于开发新功能或修复问题。 提交（Commit）：将更改保存到本地的操作。 推送（Push）：将本地的代码更改推送到存储库。 拉取（Pull）：将存储库中的更改同步到本地。  常用 Git 命令 🙌 现在，我们来学习一些常用的 Git 命令。
1. git init git init 命令用于创建一个新的 Git 仓库。
1 2  # 初始化一个新的 Git 仓库 git init   2. git clone git clone 命令用于将存储库复制到本地。
1 2  # 克隆存储库 git clone https://github.com/username/repository.git   3. git add git add 命令用于将更改添加到暂存区。</description>
    </item>
    
    <item>
      <title>Git 命令手册 📖</title>
      <link>http://tangxiaomi.top/notes/posts/git/guide/</link>
      <pubDate>Tue, 23 May 2023 00:00:00 +0000</pubDate>
      
      <guid>http://tangxiaomi.top/notes/posts/git/guide/</guid>
      <description>这是一份 Git 命令的快速查找手册，包含了 Git 的常用命令和基本用法。快速找到你需要的命令和用法，让你的 Git 使用更加轻松自如。
🚀 初始化  git init : 初始化一个 Git 仓库。 git clone &amp;lt;URL&amp;gt; : 克隆一个远程 Git 仓库。  📝 添加与提交  git add &amp;lt;file&amp;gt; : 将文件添加到暂存区。 git add . : 将所有修改添加到暂存区。 git commit -m &amp;quot;&amp;lt;message&amp;gt;&amp;quot; : 提交变更并附上提交信息。 git commit -a : 跳过暂存区，直接提交所有变更。  🌿 分支和合并  git branch : 列出当前仓库的所有分支。 git branch &amp;lt;branch&amp;gt; : 创建一个新分支。 git checkout &amp;lt;branch&amp;gt; : 切换到一个分支。 git checkout -b &amp;lt;branch&amp;gt; : 创建一个新的分支并立即切换到该分支。 git merge &amp;lt;branch&amp;gt; : 合并指定分支到当前分支。 git merge --no-ff &amp;lt;branch&amp;gt; : 强制 Git 创建一个新的合并提交，即使当前分支可以通过快进合并到指定分支。  🔀 推送与拉取  git pull : 从远程仓库拉取代码。 git push : 将本地分支的更改推送到远程仓库。 git push -u &amp;lt;remote&amp;gt; &amp;lt;branch&amp;gt; : 第一次推送分支时，使用此命令将本地分支推送到远程仓库。 git fetch &amp;lt;remote&amp;gt; : 从远程仓库拉取变更，但不自动合并它们。 git fetch --all : 从远程仓库拉取所有分支的变更，但不自动合并它们。 git push &amp;lt;remote&amp;gt; --delete &amp;lt;branch&amp;gt; : 从远程仓库删除指定分支。  🔎 查看日志  git log : 查看提交日志。 git log --oneline : 查看简洁的提交日志。 git log --graph --oneline : 查看提交日志并显示分支合并图。 git blame &amp;lt;file&amp;gt; : 显示指定文件的每一行是由谁添加的。  ❌ 撤销与修改  git checkout &amp;lt;file&amp;gt; : 用仓库中的文件替换工作目录中的文件，从而撤消最近的修订。 git reset HEAD &amp;lt;file&amp;gt; : 取消已暂存文件。 git reset HEAD~ : 返回上一个commit版本，并将文件修改保留在工作目录。 git reset &amp;lt;commit&amp;gt; : 恢复指定提交的状态，同时将工作区和暂存区的修改移回到工作区。 git reset --hard : 取消所有本地修改，并恢复到最近的提交状态。 git clean -f : 删除未被跟踪的文件。  🎨 其他命令  git status : 显示工作目录下已提交和未提交的修改。 git diff : 显示工作目录和本地仓库之间的差异。 git stash : 将工作目录中的未提交修改保存到一个栈中。 git stash apply : 恢复最新的stash，并将内容应用于工作区。 git stash list : 显示所有的stash记录。 git stash pop : 删除最新的stash，并将其应用于工作区。 git stash drop : 删除最新的stash。 git remote add &amp;lt;name&amp;gt; &amp;lt;url&amp;gt; : 将一个新远程仓库添加到当前 Git 仓库中。 git remote -v : 显示当前仓库的所有远程仓库及其 URL。 git tag : 列出已经存在的标签。 git tag &amp;lt;tagname&amp;gt; : 新建一个标签，默认为HEAD，用于后续推送到远程仓库。 git push origin &amp;lt;tagname&amp;gt; : 将指定标签推送到远程仓库。 git push origin --tags : 将所有标签推送到远程仓库。 git show &amp;lt;commit&amp;gt; : 显示指定提交的信息。  这就是我们的 Git 命令手册，如果你有任何疑问或建议，请在评论区留言。希望这份手册能为你在 Git 使用中提供帮助！ 🌟</description>
    </item>
    
    <item>
      <title>如何在 Vite 中拦截开发服务器并使用 express</title>
      <link>http://tangxiaomi.top/notes/posts/vite/vite-or-express/</link>
      <pubDate>Tue, 23 May 2023 00:00:00 +0000</pubDate>
      
      <guid>http://tangxiaomi.top/notes/posts/vite/vite-or-express/</guid>
      <description>Vite 是一个快速、轻量级、易于使用的前端工具。它为开发者提供了一种现代的构建方式，可以快速地构建出高效且易于维护的 Web 应用程序。
在 Vite 版本 4.2 及以上的版本中，我们可以使用 configureServer 方法来拦截 Vite 开发服务器，并将其替换为 express HTTP 服务器。这样，我们就可以使用更加灵活的 HTTP 服务器组合，并且可以方便地实现登录、鉴权等功能。
配置 Vite 插件 为了使用自定义的 express 应用程序，我们需要编写一个 Vite 插件
我们可以通过 myPlugin 函数来创建一个新插件。这个插件暴露了一个 configureServer 方法，我们可以在这个方法中创建并配置一个 express 应用程序。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30  import express from &amp;#39;express&amp;#39; import cors from &amp;#39;cors&amp;#39; import bodyParser from &amp;#39;body-parser&amp;#39; import cookieParser from &amp;#39;cookie-parser&amp;#39; export default function myPlugin () { return { name: &amp;#39;my-plugin&amp;#39;, configureServer (server) { const app = express() app.</description>
    </item>
    
    <item>
      <title>📡 光纤传输信息</title>
      <link>http://tangxiaomi.top/notes/posts/pop-sci/optical/</link>
      <pubDate>Tue, 23 May 2023 00:00:00 +0000</pubDate>
      
      <guid>http://tangxiaomi.top/notes/posts/pop-sci/optical/</guid>
      <description>随着科技的发展，信息传输的速度和质量越来越得到重视。而现在，光纤传输已经成为了信息传输领域的主角，成为了现代通讯的主要手段之一。
🔍 光纤传输的原理 「光纤传输的原理」其实很简单，就像在水中游泳，鱼需要通过水来传递信息一样，光线在光纤中，通过TIR全反射来进行信息的传输，将光的信息从一端传输到另一端。
在光线传输时，光线会在纤芯内不断地被反射，而光纤的纤芯和外包层的材料不同，会使得光线被束缚在光纤中，从而在光纤中一直传输，直到到达另一端。这个过程在信号传输的过程中是不容易受到外界干扰的，从而保证了传输信息的质量。
😎 光纤传输的优点 相对于其他的信息传输方式，光纤传输具有以下优点：
 速度快：传输速度高，一般可以达到每秒数十亿位的速度。 距离远：光纤传输可以在距离上远远超过其他传输方式，可以实现地球上各个角落之间的信息传输。 带宽大：光纤的带宽很大，能够传输大量数据。 安全可靠：光纤传输信号受干扰少，在数字化的时代，确保信息的安全可靠也是非常重要的。  🚀 举例说明 比如，我们现在播放一首音乐，如果是通过无线电波传输的话，在传输过程中可能会受到许多干扰，使得音质受到影响。但是，如果是通过光纤传输的话，可以保证音质的清晰和传输的顺利。
又比如，在视频会议中，如果使用光纤作为传输媒介，那么就可以保证双方之间的通信质量非常好，不像其他媒介容易出现卡顿或者画质模糊等问题。
🌟 总结 总的来说，光纤传输的技术是在信息领域里，为我们提供了通信速度快，通信质量高，数据安全可靠等多样的优势。无论在哪一个方面，光纤传输都对我们的生活和工作有很大的帮助。</description>
    </item>
    
    <item>
      <title>🔐 Git SSH 配置教程</title>
      <link>http://tangxiaomi.top/notes/posts/git/ssh/</link>
      <pubDate>Mon, 09 May 2022 00:00:00 +0000</pubDate>
      
      <guid>http://tangxiaomi.top/notes/posts/git/ssh/</guid>
      <description>本教程将介绍如何在 Git 中配置 SSH，并提供常用的 Git SSH 命令。</description>
    </item>
    
  </channel>
</rss>
