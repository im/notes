<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>git on Notes 📒</title>
    <link>http://tangxiaomi.top/notes/tags/git/</link>
    <description>Recent content in git on Notes 📒</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>cn</language>
    <lastBuildDate>Tue, 23 May 2023 00:00:00 +0000</lastBuildDate><atom:link href="http://tangxiaomi.top/notes/tags/git/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Git 入门指南 🚀</title>
      <link>http://tangxiaomi.top/notes/posts/git/basic/</link>
      <pubDate>Tue, 23 May 2023 00:00:00 +0000</pubDate>
      
      <guid>http://tangxiaomi.top/notes/posts/git/basic/</guid>
      <description>如果你是一个开发者，你一定知道如何使用 Git。Git 是一个版本控制系统，可以帮助我们有效地管理我们的代码和文件。在本文中，我们将介绍 Git 的一些基础知识，以及一些经常使用的 Git 命令。
Git 基础概念 🤔 在开始学习 Git 之前，让我们来了解一些 Git 的基础概念：
 仓库（Repository）：存放你的代码和文件的地方。 分支（Branch）：与主分支不同的版本，可以用于开发新功能或修复问题。 提交（Commit）：将更改保存到本地的操作。 推送（Push）：将本地的代码更改推送到存储库。 拉取（Pull）：将存储库中的更改同步到本地。  常用 Git 命令 🙌 现在，我们来学习一些常用的 Git 命令。
1. git init git init 命令用于创建一个新的 Git 仓库。
1 2  # 初始化一个新的 Git 仓库 git init   2. git clone git clone 命令用于将存储库复制到本地。
1 2  # 克隆存储库 git clone https://github.com/username/repository.git   3. git add git add 命令用于将更改添加到暂存区。</description>
    </item>
    
    <item>
      <title>Git 命令手册 📖</title>
      <link>http://tangxiaomi.top/notes/posts/git/guide/</link>
      <pubDate>Tue, 23 May 2023 00:00:00 +0000</pubDate>
      
      <guid>http://tangxiaomi.top/notes/posts/git/guide/</guid>
      <description>这是一份 Git 命令的快速查找手册，包含了 Git 的常用命令和基本用法。快速找到你需要的命令和用法，让你的 Git 使用更加轻松自如。
🚀 初始化  git init : 初始化一个 Git 仓库。 git clone &amp;lt;URL&amp;gt; : 克隆一个远程 Git 仓库。  📝 添加与提交  git add &amp;lt;file&amp;gt; : 将文件添加到暂存区。 git add . : 将所有修改添加到暂存区。 git commit -m &amp;quot;&amp;lt;message&amp;gt;&amp;quot; : 提交变更并附上提交信息。 git commit -a : 跳过暂存区，直接提交所有变更。  🌿 分支和合并  git branch : 列出当前仓库的所有分支。 git branch &amp;lt;branch&amp;gt; : 创建一个新分支。 git checkout &amp;lt;branch&amp;gt; : 切换到一个分支。 git checkout -b &amp;lt;branch&amp;gt; : 创建一个新的分支并立即切换到该分支。 git merge &amp;lt;branch&amp;gt; : 合并指定分支到当前分支。 git merge --no-ff &amp;lt;branch&amp;gt; : 强制 Git 创建一个新的合并提交，即使当前分支可以通过快进合并到指定分支。  🔀 推送与拉取  git pull : 从远程仓库拉取代码。 git push : 将本地分支的更改推送到远程仓库。 git push -u &amp;lt;remote&amp;gt; &amp;lt;branch&amp;gt; : 第一次推送分支时，使用此命令将本地分支推送到远程仓库。 git fetch &amp;lt;remote&amp;gt; : 从远程仓库拉取变更，但不自动合并它们。 git fetch --all : 从远程仓库拉取所有分支的变更，但不自动合并它们。 git push &amp;lt;remote&amp;gt; --delete &amp;lt;branch&amp;gt; : 从远程仓库删除指定分支。  🔎 查看日志  git log : 查看提交日志。 git log --oneline : 查看简洁的提交日志。 git log --graph --oneline : 查看提交日志并显示分支合并图。 git blame &amp;lt;file&amp;gt; : 显示指定文件的每一行是由谁添加的。  ❌ 撤销与修改  git checkout &amp;lt;file&amp;gt; : 用仓库中的文件替换工作目录中的文件，从而撤消最近的修订。 git reset HEAD &amp;lt;file&amp;gt; : 取消已暂存文件。 git reset HEAD~ : 返回上一个commit版本，并将文件修改保留在工作目录。 git reset &amp;lt;commit&amp;gt; : 恢复指定提交的状态，同时将工作区和暂存区的修改移回到工作区。 git reset --hard : 取消所有本地修改，并恢复到最近的提交状态。 git clean -f : 删除未被跟踪的文件。  🎨 其他命令  git status : 显示工作目录下已提交和未提交的修改。 git diff : 显示工作目录和本地仓库之间的差异。 git stash : 将工作目录中的未提交修改保存到一个栈中。 git stash apply : 恢复最新的stash，并将内容应用于工作区。 git stash list : 显示所有的stash记录。 git stash pop : 删除最新的stash，并将其应用于工作区。 git stash drop : 删除最新的stash。 git remote add &amp;lt;name&amp;gt; &amp;lt;url&amp;gt; : 将一个新远程仓库添加到当前 Git 仓库中。 git remote -v : 显示当前仓库的所有远程仓库及其 URL。 git tag : 列出已经存在的标签。 git tag &amp;lt;tagname&amp;gt; : 新建一个标签，默认为HEAD，用于后续推送到远程仓库。 git push origin &amp;lt;tagname&amp;gt; : 将指定标签推送到远程仓库。 git push origin --tags : 将所有标签推送到远程仓库。 git show &amp;lt;commit&amp;gt; : 显示指定提交的信息。  这就是我们的 Git 命令手册，如果你有任何疑问或建议，请在评论区留言。希望这份手册能为你在 Git 使用中提供帮助！ 🌟</description>
    </item>
    
    <item>
      <title>🔐 Git SSH 配置教程</title>
      <link>http://tangxiaomi.top/notes/posts/git/ssh/</link>
      <pubDate>Mon, 09 May 2022 00:00:00 +0000</pubDate>
      
      <guid>http://tangxiaomi.top/notes/posts/git/ssh/</guid>
      <description>本教程将介绍如何在 Git 中配置 SSH，并提供常用的 Git SSH 命令。</description>
    </item>
    
  </channel>
</rss>
