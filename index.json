[{"content":"Vite 是一个快速、轻量级、易于使用的前端工具。它为开发者提供了一种现代的构建方式，可以快速地构建出高效且易于维护的 Web 应用程序。\n在 Vite 版本 4.2 及以上的版本中，我们可以使用 configureServer 方法来拦截 Vite 开发服务器，并将其替换为 express HTTP 服务器。这样，我们就可以使用更加灵活的 HTTP 服务器组合，并且可以方便地实现登录、鉴权等功能。\n配置 Vite 插件 为了使用自定义的 express 应用程序，我们需要编写一个 Vite 插件\n我们可以通过 myPlugin 函数来创建一个新插件。这个插件暴露了一个 configureServer 方法，我们可以在这个方法中创建并配置一个 express 应用程序。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30  import express from \u0026#39;express\u0026#39; import cors from \u0026#39;cors\u0026#39; import bodyParser from \u0026#39;body-parser\u0026#39; import cookieParser from \u0026#39;cookie-parser\u0026#39; export default function myPlugin () { return { name: \u0026#39;my-plugin\u0026#39;, configureServer (server) { const app = express() app.use(cors({ credentials: true, origin: true })) app.use(bodyParser.urlencoded({ extended: false })) app.use(cookieParser()) server.middlewares.use(app) app.use(\u0026#39;/login\u0026#39;, () =\u0026gt; { // login  }) } } }   在 configureServer 方法中，我们首先创建了一个新的 express 应用程序 app。\n接下来，我们注册了 cors、body-parser 和 cookie-parser 中间件，这样我们就可以在应用程序中使用这些中间件了。\n然后，我们将应用程序添加到 Vite 开发服务器的中间件中，这样就可以使用自定义的 express 应用程序来处理 HTTP 请求了。\n最后，我们向应用程序中添加了一个处理 /login URL 路径的路由处理函数，用于执行登录逻辑。\n配置 Vite 使用 configureServer 来配置 Vite 开发服务器也很简单。我们只需要将插件导入应用程序，然后将其添加到 Vite 配置的 plugins 队列中，就可以完整地拦截 Vite 开发服务器了。\n1 2 3 4 5 6 7 8  import myPlugin from \u0026#39;./myPlugin\u0026#39; export default defineConfig({ // ...  plugins: [ myPlugin() ] })   结论 通过使用 configureServer 方法，我们可以轻松地拦截 Vite 开发服务器，并使用 express HTTP 服务器来替换它。\n这种方式可以让我们在 Vite 开发服务器中使用更加灵活的 HTTP 服务器组合，并且可以方便地实现登录、鉴权等功能。\n","permalink":"http://tangxiaomi.top/notes/posts/vite/vite-or-express/","summary":"Vite 是一个快速、轻量级、易于使用的前端工具。它为开发者提供了一种现代的构建方式，可以快速地构建出高效且易于维护的 Web 应用程序。\n在 Vite 版本 4.2 及以上的版本中，我们可以使用 configureServer 方法来拦截 Vite 开发服务器，并将其替换为 express HTTP 服务器。这样，我们就可以使用更加灵活的 HTTP 服务器组合，并且可以方便地实现登录、鉴权等功能。\n配置 Vite 插件 为了使用自定义的 express 应用程序，我们需要编写一个 Vite 插件\n我们可以通过 myPlugin 函数来创建一个新插件。这个插件暴露了一个 configureServer 方法，我们可以在这个方法中创建并配置一个 express 应用程序。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30  import express from \u0026#39;express\u0026#39; import cors from \u0026#39;cors\u0026#39; import bodyParser from \u0026#39;body-parser\u0026#39; import cookieParser from \u0026#39;cookie-parser\u0026#39; export default function myPlugin () { return { name: \u0026#39;my-plugin\u0026#39;, configureServer (server) { const app = express() app.","title":"如何在 Vite 中拦截开发服务器并使用 express"},{"content":"随着科技的发展，信息传输的速度和质量越来越得到重视。而现在，光纤传输已经成为了信息传输领域的主角，成为了现代通讯的主要手段之一。\n🔍 光纤传输的原理 「光纤传输的原理」其实很简单，就像在水中游泳，鱼需要通过水来传递信息一样，光线在光纤中，通过TIR全反射来进行信息的传输，将光的信息从一端传输到另一端。\n在光线传输时，光线会在纤芯内不断地被反射，而光纤的纤芯和外包层的材料不同，会使得光线被束缚在光纤中，从而在光纤中一直传输，直到到达另一端。这个过程在信号传输的过程中是不容易受到外界干扰的，从而保证了传输信息的质量。\n😎 光纤传输的优点 相对于其他的信息传输方式，光纤传输具有以下优点：\n 速度快：传输速度高，一般可以达到每秒数十亿位的速度。 距离远：光纤传输可以在距离上远远超过其他传输方式，可以实现地球上各个角落之间的信息传输。 带宽大：光纤的带宽很大，能够传输大量数据。 安全可靠：光纤传输信号受干扰少，在数字化的时代，确保信息的安全可靠也是非常重要的。  🚀 举例说明 比如，我们现在播放一首音乐，如果是通过无线电波传输的话，在传输过程中可能会受到许多干扰，使得音质受到影响。但是，如果是通过光纤传输的话，可以保证音质的清晰和传输的顺利。\n又比如，在视频会议中，如果使用光纤作为传输媒介，那么就可以保证双方之间的通信质量非常好，不像其他媒介容易出现卡顿或者画质模糊等问题。\n🌟 总结 总的来说，光纤传输的技术是在信息领域里，为我们提供了通信速度快，通信质量高，数据安全可靠等多样的优势。无论在哪一个方面，光纤传输都对我们的生活和工作有很大的帮助。\n","permalink":"http://tangxiaomi.top/notes/posts/pop-sci/optical/","summary":"随着科技的发展，信息传输的速度和质量越来越得到重视。而现在，光纤传输已经成为了信息传输领域的主角，成为了现代通讯的主要手段之一。\n🔍 光纤传输的原理 「光纤传输的原理」其实很简单，就像在水中游泳，鱼需要通过水来传递信息一样，光线在光纤中，通过TIR全反射来进行信息的传输，将光的信息从一端传输到另一端。\n在光线传输时，光线会在纤芯内不断地被反射，而光纤的纤芯和外包层的材料不同，会使得光线被束缚在光纤中，从而在光纤中一直传输，直到到达另一端。这个过程在信号传输的过程中是不容易受到外界干扰的，从而保证了传输信息的质量。\n😎 光纤传输的优点 相对于其他的信息传输方式，光纤传输具有以下优点：\n 速度快：传输速度高，一般可以达到每秒数十亿位的速度。 距离远：光纤传输可以在距离上远远超过其他传输方式，可以实现地球上各个角落之间的信息传输。 带宽大：光纤的带宽很大，能够传输大量数据。 安全可靠：光纤传输信号受干扰少，在数字化的时代，确保信息的安全可靠也是非常重要的。  🚀 举例说明 比如，我们现在播放一首音乐，如果是通过无线电波传输的话，在传输过程中可能会受到许多干扰，使得音质受到影响。但是，如果是通过光纤传输的话，可以保证音质的清晰和传输的顺利。\n又比如，在视频会议中，如果使用光纤作为传输媒介，那么就可以保证双方之间的通信质量非常好，不像其他媒介容易出现卡顿或者画质模糊等问题。\n🌟 总结 总的来说，光纤传输的技术是在信息领域里，为我们提供了通信速度快，通信质量高，数据安全可靠等多样的优势。无论在哪一个方面，光纤传输都对我们的生活和工作有很大的帮助。","title":"📡 光纤传输信息"}]