[{"content":"如果你是一个开发者，你一定知道如何使用 Git。Git 是一个版本控制系统，可以帮助我们有效地管理我们的代码和文件。在本文中，我们将介绍 Git 的一些基础知识，以及一些经常使用的 Git 命令。\nGit 基础概念 🤔 在开始学习 Git 之前，让我们来了解一些 Git 的基础概念：\n 仓库（Repository）：存放你的代码和文件的地方。 分支（Branch）：与主分支不同的版本，可以用于开发新功能或修复问题。 提交（Commit）：将更改保存到本地的操作。 推送（Push）：将本地的代码更改推送到存储库。 拉取（Pull）：将存储库中的更改同步到本地。  常用 Git 命令 🙌 现在，我们来学习一些常用的 Git 命令。\n1. git init git init 命令用于创建一个新的 Git 仓库。\n1 2  # 初始化一个新的 Git 仓库 git init   2. git clone git clone 命令用于将存储库复制到本地。\n1 2  # 克隆存储库 git clone https://github.com/username/repository.git   3. git add git add 命令用于将更改添加到暂存区。\n1 2 3 4 5 6 7 8  # 添加单个文件 git add file.txt # 添加多个文件 git add file1.txt file2.txt # 添加所有更改 git add .   4. git commit git commit 命令用于将更改提交到本地存储库。\n1 2  # 提交更改 git commit -m \u0026#34;commit message\u0026#34;   5. git push git push 命令用于将更改推送到远程存储库。\n1 2 3 4 5  # 推送到默认分支 git push # 推送到指定分支 git push origin branch-name   6. git pull git pull 命令用于从远程存储库拉取更改，并将其合并到本地存储库中。\n1 2  # 拉取远程代码 git pull   7. git status git status 命令用于显示当前的 Git 仓库状态。\n1 2  # 显示 Git 仓库状态 git status   8. git branch git branch 命令可以用于创建，重命名，删除，列出和查找分支等命令。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  # 创建新的分支 git branch new-branch # 删除分支 git branch -d branch-name # 切换到分支 git checkout branch-name # 重命名分支 git branch -m new-branch-name # 列出本地分支 git branch # 查找分支 git branch --contains commit-hash   9. git checkout git checkout 命令用于切换分支或恢复文件。\n1 2 3 4 5  # 切换分支 git checkout branch-name # 恢复文件 git checkout file.txt   10. git log git log 命令用于显示 Git 存储库的提交历史记录。\n1 2  # 显示提交历史记录 git log   11. git diff git diff 命令用于显示文件的改动情况。\n1 2 3 4 5 6 7 8  # 查看工作目录中的更改 git diff # 查看已经暂存的更改 git diff --cached # 查看某个提交版本和当前版本之间的差异 git diff HEAD commit-hash   12. git reset git reset 命令用于撤销提交并重置存储库。\n1 2 3 4 5  # 撤销最新的提交 git reset --soft HEAD~1 # 撤销最新的提交并将文件恢复到工作目录中 git reset --hard HEAD~1   13. git merge git merge 命令用于合并两个分支。\n1 2 3 4 5  # 合并分支 git merge source-branch # 合并固定的提交到当前分支 git cherry-pick commit-hash   14. git stash git stash 命令可用来保存当前目录中的更改，以便稍后恢复。\n1 2 3 4 5 6 7 8  # 保存当前目录下的改动 git stash # 恢复最后一个被 stash 的状态 git stash pop # 查看 stash 列表 git stash list   15. git remote git remote 命令用于管理与存储库的远程连接。\n1 2 3 4 5 6 7 8  # 添加远程存储库 git remote add origin https://github.com/username/repository.git # 查看远程存储库列表 git remote -v # 删除远程存储库 git remote rm origin   结论 👍 以上就是一些常用的 Git 命令，当然还有很多其他的命令和用法，但这些已经足够让你入门 Git 了。希望本文能够帮助你更好地理解和应用 Git，管理你的代码并提高你的工作效率！同时，加入 Emoji 表情也能增加文章的趣味性。加油！\n","permalink":"http://tangxiaomi.top/notes/posts/git/basic/","summary":"如果你是一个开发者，你一定知道如何使用 Git。Git 是一个版本控制系统，可以帮助我们有效地管理我们的代码和文件。在本文中，我们将介绍 Git 的一些基础知识，以及一些经常使用的 Git 命令。\nGit 基础概念 🤔 在开始学习 Git 之前，让我们来了解一些 Git 的基础概念：\n 仓库（Repository）：存放你的代码和文件的地方。 分支（Branch）：与主分支不同的版本，可以用于开发新功能或修复问题。 提交（Commit）：将更改保存到本地的操作。 推送（Push）：将本地的代码更改推送到存储库。 拉取（Pull）：将存储库中的更改同步到本地。  常用 Git 命令 🙌 现在，我们来学习一些常用的 Git 命令。\n1. git init git init 命令用于创建一个新的 Git 仓库。\n1 2  # 初始化一个新的 Git 仓库 git init   2. git clone git clone 命令用于将存储库复制到本地。\n1 2  # 克隆存储库 git clone https://github.com/username/repository.git   3. git add git add 命令用于将更改添加到暂存区。","title":"Git 入门指南 🚀"},{"content":"这是一份 Git 命令的快速查找手册，包含了 Git 的常用命令和基本用法。快速找到你需要的命令和用法，让你的 Git 使用更加轻松自如。\n🚀 初始化  git init : 初始化一个 Git 仓库。 git clone \u0026lt;URL\u0026gt; : 克隆一个远程 Git 仓库。  📝 添加与提交  git add \u0026lt;file\u0026gt; : 将文件添加到暂存区。 git add . : 将所有修改添加到暂存区。 git commit -m \u0026quot;\u0026lt;message\u0026gt;\u0026quot; : 提交变更并附上提交信息。 git commit -a : 跳过暂存区，直接提交所有变更。  🌿 分支和合并  git branch : 列出当前仓库的所有分支。 git branch \u0026lt;branch\u0026gt; : 创建一个新分支。 git checkout \u0026lt;branch\u0026gt; : 切换到一个分支。 git checkout -b \u0026lt;branch\u0026gt; : 创建一个新的分支并立即切换到该分支。 git merge \u0026lt;branch\u0026gt; : 合并指定分支到当前分支。 git merge --no-ff \u0026lt;branch\u0026gt; : 强制 Git 创建一个新的合并提交，即使当前分支可以通过快进合并到指定分支。  🔀 推送与拉取  git pull : 从远程仓库拉取代码。 git push : 将本地分支的更改推送到远程仓库。 git push -u \u0026lt;remote\u0026gt; \u0026lt;branch\u0026gt; : 第一次推送分支时，使用此命令将本地分支推送到远程仓库。 git fetch \u0026lt;remote\u0026gt; : 从远程仓库拉取变更，但不自动合并它们。 git fetch --all : 从远程仓库拉取所有分支的变更，但不自动合并它们。 git push \u0026lt;remote\u0026gt; --delete \u0026lt;branch\u0026gt; : 从远程仓库删除指定分支。  🔎 查看日志  git log : 查看提交日志。 git log --oneline : 查看简洁的提交日志。 git log --graph --oneline : 查看提交日志并显示分支合并图。 git blame \u0026lt;file\u0026gt; : 显示指定文件的每一行是由谁添加的。  ❌ 撤销与修改  git checkout \u0026lt;file\u0026gt; : 用仓库中的文件替换工作目录中的文件，从而撤消最近的修订。 git reset HEAD \u0026lt;file\u0026gt; : 取消已暂存文件。 git reset HEAD~ : 返回上一个commit版本，并将文件修改保留在工作目录。 git reset \u0026lt;commit\u0026gt; : 恢复指定提交的状态，同时将工作区和暂存区的修改移回到工作区。 git reset --hard : 取消所有本地修改，并恢复到最近的提交状态。 git clean -f : 删除未被跟踪的文件。  🎨 其他命令  git status : 显示工作目录下已提交和未提交的修改。 git diff : 显示工作目录和本地仓库之间的差异。 git stash : 将工作目录中的未提交修改保存到一个栈中。 git stash apply : 恢复最新的stash，并将内容应用于工作区。 git stash list : 显示所有的stash记录。 git stash pop : 删除最新的stash，并将其应用于工作区。 git stash drop : 删除最新的stash。 git remote add \u0026lt;name\u0026gt; \u0026lt;url\u0026gt; : 将一个新远程仓库添加到当前 Git 仓库中。 git remote -v : 显示当前仓库的所有远程仓库及其 URL。 git tag : 列出已经存在的标签。 git tag \u0026lt;tagname\u0026gt; : 新建一个标签，默认为HEAD，用于后续推送到远程仓库。 git push origin \u0026lt;tagname\u0026gt; : 将指定标签推送到远程仓库。 git push origin --tags : 将所有标签推送到远程仓库。 git show \u0026lt;commit\u0026gt; : 显示指定提交的信息。  这就是我们的 Git 命令手册，如果你有任何疑问或建议，请在评论区留言。希望这份手册能为你在 Git 使用中提供帮助！ 🌟\n","permalink":"http://tangxiaomi.top/notes/posts/git/guide/","summary":"这是一份 Git 命令的快速查找手册，包含了 Git 的常用命令和基本用法。快速找到你需要的命令和用法，让你的 Git 使用更加轻松自如。\n🚀 初始化  git init : 初始化一个 Git 仓库。 git clone \u0026lt;URL\u0026gt; : 克隆一个远程 Git 仓库。  📝 添加与提交  git add \u0026lt;file\u0026gt; : 将文件添加到暂存区。 git add . : 将所有修改添加到暂存区。 git commit -m \u0026quot;\u0026lt;message\u0026gt;\u0026quot; : 提交变更并附上提交信息。 git commit -a : 跳过暂存区，直接提交所有变更。  🌿 分支和合并  git branch : 列出当前仓库的所有分支。 git branch \u0026lt;branch\u0026gt; : 创建一个新分支。 git checkout \u0026lt;branch\u0026gt; : 切换到一个分支。 git checkout -b \u0026lt;branch\u0026gt; : 创建一个新的分支并立即切换到该分支。 git merge \u0026lt;branch\u0026gt; : 合并指定分支到当前分支。 git merge --no-ff \u0026lt;branch\u0026gt; : 强制 Git 创建一个新的合并提交，即使当前分支可以通过快进合并到指定分支。  🔀 推送与拉取  git pull : 从远程仓库拉取代码。 git push : 将本地分支的更改推送到远程仓库。 git push -u \u0026lt;remote\u0026gt; \u0026lt;branch\u0026gt; : 第一次推送分支时，使用此命令将本地分支推送到远程仓库。 git fetch \u0026lt;remote\u0026gt; : 从远程仓库拉取变更，但不自动合并它们。 git fetch --all : 从远程仓库拉取所有分支的变更，但不自动合并它们。 git push \u0026lt;remote\u0026gt; --delete \u0026lt;branch\u0026gt; : 从远程仓库删除指定分支。  🔎 查看日志  git log : 查看提交日志。 git log --oneline : 查看简洁的提交日志。 git log --graph --oneline : 查看提交日志并显示分支合并图。 git blame \u0026lt;file\u0026gt; : 显示指定文件的每一行是由谁添加的。  ❌ 撤销与修改  git checkout \u0026lt;file\u0026gt; : 用仓库中的文件替换工作目录中的文件，从而撤消最近的修订。 git reset HEAD \u0026lt;file\u0026gt; : 取消已暂存文件。 git reset HEAD~ : 返回上一个commit版本，并将文件修改保留在工作目录。 git reset \u0026lt;commit\u0026gt; : 恢复指定提交的状态，同时将工作区和暂存区的修改移回到工作区。 git reset --hard : 取消所有本地修改，并恢复到最近的提交状态。 git clean -f : 删除未被跟踪的文件。  🎨 其他命令  git status : 显示工作目录下已提交和未提交的修改。 git diff : 显示工作目录和本地仓库之间的差异。 git stash : 将工作目录中的未提交修改保存到一个栈中。 git stash apply : 恢复最新的stash，并将内容应用于工作区。 git stash list : 显示所有的stash记录。 git stash pop : 删除最新的stash，并将其应用于工作区。 git stash drop : 删除最新的stash。 git remote add \u0026lt;name\u0026gt; \u0026lt;url\u0026gt; : 将一个新远程仓库添加到当前 Git 仓库中。 git remote -v : 显示当前仓库的所有远程仓库及其 URL。 git tag : 列出已经存在的标签。 git tag \u0026lt;tagname\u0026gt; : 新建一个标签，默认为HEAD，用于后续推送到远程仓库。 git push origin \u0026lt;tagname\u0026gt; : 将指定标签推送到远程仓库。 git push origin --tags : 将所有标签推送到远程仓库。 git show \u0026lt;commit\u0026gt; : 显示指定提交的信息。  这就是我们的 Git 命令手册，如果你有任何疑问或建议，请在评论区留言。希望这份手册能为你在 Git 使用中提供帮助！ 🌟","title":"Git 命令手册 📖"},{"content":"Vite 是一个快速、轻量级、易于使用的前端工具。它为开发者提供了一种现代的构建方式，可以快速地构建出高效且易于维护的 Web 应用程序。\n在 Vite 版本 4.2 及以上的版本中，我们可以使用 configureServer 方法来拦截 Vite 开发服务器，并将其替换为 express HTTP 服务器。这样，我们就可以使用更加灵活的 HTTP 服务器组合，并且可以方便地实现登录、鉴权等功能。\n配置 Vite 插件 为了使用自定义的 express 应用程序，我们需要编写一个 Vite 插件\n我们可以通过 myPlugin 函数来创建一个新插件。这个插件暴露了一个 configureServer 方法，我们可以在这个方法中创建并配置一个 express 应用程序。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30  import express from \u0026#39;express\u0026#39; import cors from \u0026#39;cors\u0026#39; import bodyParser from \u0026#39;body-parser\u0026#39; import cookieParser from \u0026#39;cookie-parser\u0026#39; export default function myPlugin () { return { name: \u0026#39;my-plugin\u0026#39;, configureServer (server) { const app = express() app.use(cors({ credentials: true, origin: true })) app.use(bodyParser.urlencoded({ extended: false })) app.use(cookieParser()) server.middlewares.use(app) app.use(\u0026#39;/login\u0026#39;, () =\u0026gt; { // login  }) } } }   在 configureServer 方法中，我们首先创建了一个新的 express 应用程序 app。\n接下来，我们注册了 cors、body-parser 和 cookie-parser 中间件，这样我们就可以在应用程序中使用这些中间件了。\n然后，我们将应用程序添加到 Vite 开发服务器的中间件中，这样就可以使用自定义的 express 应用程序来处理 HTTP 请求了。\n最后，我们向应用程序中添加了一个处理 /login URL 路径的路由处理函数，用于执行登录逻辑。\n配置 Vite 使用 configureServer 来配置 Vite 开发服务器也很简单。我们只需要将插件导入应用程序，然后将其添加到 Vite 配置的 plugins 队列中，就可以完整地拦截 Vite 开发服务器了。\n1 2 3 4 5 6 7 8  import myPlugin from \u0026#39;./myPlugin\u0026#39; export default defineConfig({ // ...  plugins: [ myPlugin() ] })   结论 通过使用 configureServer 方法，我们可以轻松地拦截 Vite 开发服务器，并使用 express HTTP 服务器来替换它。\n这种方式可以让我们在 Vite 开发服务器中使用更加灵活的 HTTP 服务器组合，并且可以方便地实现登录、鉴权等功能。\n","permalink":"http://tangxiaomi.top/notes/posts/vite/vite-or-express/","summary":"Vite 是一个快速、轻量级、易于使用的前端工具。它为开发者提供了一种现代的构建方式，可以快速地构建出高效且易于维护的 Web 应用程序。\n在 Vite 版本 4.2 及以上的版本中，我们可以使用 configureServer 方法来拦截 Vite 开发服务器，并将其替换为 express HTTP 服务器。这样，我们就可以使用更加灵活的 HTTP 服务器组合，并且可以方便地实现登录、鉴权等功能。\n配置 Vite 插件 为了使用自定义的 express 应用程序，我们需要编写一个 Vite 插件\n我们可以通过 myPlugin 函数来创建一个新插件。这个插件暴露了一个 configureServer 方法，我们可以在这个方法中创建并配置一个 express 应用程序。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30  import express from \u0026#39;express\u0026#39; import cors from \u0026#39;cors\u0026#39; import bodyParser from \u0026#39;body-parser\u0026#39; import cookieParser from \u0026#39;cookie-parser\u0026#39; export default function myPlugin () { return { name: \u0026#39;my-plugin\u0026#39;, configureServer (server) { const app = express() app.","title":"如何在 Vite 中拦截开发服务器并使用 express"},{"content":"随着科技的发展，信息传输的速度和质量越来越得到重视。而现在，光纤传输已经成为了信息传输领域的主角，成为了现代通讯的主要手段之一。\n🔍 光纤传输的原理 「光纤传输的原理」其实很简单，就像在水中游泳，鱼需要通过水来传递信息一样，光线在光纤中，通过TIR全反射来进行信息的传输，将光的信息从一端传输到另一端。\n在光线传输时，光线会在纤芯内不断地被反射，而光纤的纤芯和外包层的材料不同，会使得光线被束缚在光纤中，从而在光纤中一直传输，直到到达另一端。这个过程在信号传输的过程中是不容易受到外界干扰的，从而保证了传输信息的质量。\n😎 光纤传输的优点 相对于其他的信息传输方式，光纤传输具有以下优点：\n 速度快：传输速度高，一般可以达到每秒数十亿位的速度。 距离远：光纤传输可以在距离上远远超过其他传输方式，可以实现地球上各个角落之间的信息传输。 带宽大：光纤的带宽很大，能够传输大量数据。 安全可靠：光纤传输信号受干扰少，在数字化的时代，确保信息的安全可靠也是非常重要的。  🚀 举例说明 比如，我们现在播放一首音乐，如果是通过无线电波传输的话，在传输过程中可能会受到许多干扰，使得音质受到影响。但是，如果是通过光纤传输的话，可以保证音质的清晰和传输的顺利。\n又比如，在视频会议中，如果使用光纤作为传输媒介，那么就可以保证双方之间的通信质量非常好，不像其他媒介容易出现卡顿或者画质模糊等问题。\n🌟 总结 总的来说，光纤传输的技术是在信息领域里，为我们提供了通信速度快，通信质量高，数据安全可靠等多样的优势。无论在哪一个方面，光纤传输都对我们的生活和工作有很大的帮助。\n","permalink":"http://tangxiaomi.top/notes/posts/pop-sci/optical/","summary":"随着科技的发展，信息传输的速度和质量越来越得到重视。而现在，光纤传输已经成为了信息传输领域的主角，成为了现代通讯的主要手段之一。\n🔍 光纤传输的原理 「光纤传输的原理」其实很简单，就像在水中游泳，鱼需要通过水来传递信息一样，光线在光纤中，通过TIR全反射来进行信息的传输，将光的信息从一端传输到另一端。\n在光线传输时，光线会在纤芯内不断地被反射，而光纤的纤芯和外包层的材料不同，会使得光线被束缚在光纤中，从而在光纤中一直传输，直到到达另一端。这个过程在信号传输的过程中是不容易受到外界干扰的，从而保证了传输信息的质量。\n😎 光纤传输的优点 相对于其他的信息传输方式，光纤传输具有以下优点：\n 速度快：传输速度高，一般可以达到每秒数十亿位的速度。 距离远：光纤传输可以在距离上远远超过其他传输方式，可以实现地球上各个角落之间的信息传输。 带宽大：光纤的带宽很大，能够传输大量数据。 安全可靠：光纤传输信号受干扰少，在数字化的时代，确保信息的安全可靠也是非常重要的。  🚀 举例说明 比如，我们现在播放一首音乐，如果是通过无线电波传输的话，在传输过程中可能会受到许多干扰，使得音质受到影响。但是，如果是通过光纤传输的话，可以保证音质的清晰和传输的顺利。\n又比如，在视频会议中，如果使用光纤作为传输媒介，那么就可以保证双方之间的通信质量非常好，不像其他媒介容易出现卡顿或者画质模糊等问题。\n🌟 总结 总的来说，光纤传输的技术是在信息领域里，为我们提供了通信速度快，通信质量高，数据安全可靠等多样的优势。无论在哪一个方面，光纤传输都对我们的生活和工作有很大的帮助。","title":"📡 光纤传输信息"},{"content":"Git 是一种非常流行的版本控制工具，它允许开发者在不同的机器上协同工作，并且能够追踪项目的变更。如果你想在 Git 中进行安全的通信，那么 SSH 就是你需要的工具之一。\n在本教程中，我们将介绍如何在 Git 中配置 SSH。我们将覆盖以下内容：\n 生成 SSH 密钥对 添加 SSH 密钥到 GitHub 或 GitLab 使用 SSH 连接到远程 Git 仓库 常用的 Git SSH 命令  1. 生成 SSH 密钥对 首先，我们需要生成 SSH 密钥对。在终端中使用下面的命令：\n1  ssh-keygen -t rsa   然后命令行会出现以下信息：\n1 2  Generating public/private rsa key pair. Enter file in which to save the key (/Users/you/.ssh/id_rsa):   这时候你可以在命令行中按一下回车键，这样默认情况下文件名为 id_rsa，然后继续回车并设置一个密码（不需要也可以不设置）。\n现在你在家目录下会找到一个 .ssh 的文件夹，里面会有两个文件： id_rsa 和 id_rsa.pub。其中，id_rsa 是你的私钥，不能泄露；id_rsa.pub 是你的公钥，可以告诉 Git 托管服务商。\n2. 添加 SSH 密钥到 GitHub 或 GitLab 接下来，我们需要将公钥添加到我们的 Git 托管服务商。以 GitHub 为例，进入你的个人设置，找到 SSH and GPG keys 页面，点击 New SSH key，然后将 id_rsa.pub 中的内容复制粘贴到 Key 字段中。\n现在，你就可以使用 SSH 与 Git 托管服务商进行安全通信了。\n3. 使用 SSH 连接到远程 Git 仓库 使用 SSH 连接到远程 Git 仓库的方式和使用 HTTPS 一样。只是将 https:// 替换成 ssh://，那么我们可以在命令行中使用以下命令来克隆一个仓库：\n1  git clone git@github.com:\u0026lt;username\u0026gt;/\u0026lt;repo\u0026gt;.git   如果你想推送一个更改到远程仓库，你可以使用以下命令：\n1  git push origin master   以上命令将在 origin 中推送 master 分支上的代码。你也可以使用其他分支名称。\n4. 常用的 Git SSH 命令 一些常用的 Git SSH 命令:\n git clone git@\u0026lt;host\u0026gt;:\u0026lt;username\u0026gt;/\u0026lt;repo\u0026gt;.git 克隆远程仓库 git push origin master 推送代码到 master 分支 git pull 从远程仓库拉取代码 git remote 显示远程仓库的信息  恭喜你，现在你已经成功地配置了 Git SSH！现在你可以安全地和远程仓库进行交互了。如果你有任何疑问或问题，请在评论区留言。\n","permalink":"http://tangxiaomi.top/notes/posts/git/ssh/","summary":"Git 是一种非常流行的版本控制工具，它允许开发者在不同的机器上协同工作，并且能够追踪项目的变更。如果你想在 Git 中进行安全的通信，那么 SSH 就是你需要的工具之一。\n在本教程中，我们将介绍如何在 Git 中配置 SSH。我们将覆盖以下内容：\n 生成 SSH 密钥对 添加 SSH 密钥到 GitHub 或 GitLab 使用 SSH 连接到远程 Git 仓库 常用的 Git SSH 命令  1. 生成 SSH 密钥对 首先，我们需要生成 SSH 密钥对。在终端中使用下面的命令：\n1  ssh-keygen -t rsa   然后命令行会出现以下信息：\n1 2  Generating public/private rsa key pair. Enter file in which to save the key (/Users/you/.ssh/id_rsa):   这时候你可以在命令行中按一下回车键，这样默认情况下文件名为 id_rsa，然后继续回车并设置一个密码（不需要也可以不设置）。\n现在你在家目录下会找到一个 .ssh 的文件夹，里面会有两个文件： id_rsa 和 id_rsa.","title":"🔐 Git SSH 配置教程"}]