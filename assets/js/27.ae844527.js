(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{530:function(e,n,o){"use strict";o.r(n);var t=o(19),r=Object(t.a)({},(function(){var e=this,n=e.$createElement,o=e._self._c||n;return o("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[o("h2",{attrs:{id:"构造函数创建对象"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#构造函数创建对象"}},[e._v("#")]),e._v(" 构造函数创建对象")]),e._v(" "),o("p",[e._v("我们先使用构造函数创建一个对象：\nfunction Person() {")]),e._v(" "),o("p",[e._v("}\nvar person = new Person();\nperson.name = 'Kevin';\nconsole.log(person.name) // Kevin\n在这个例子中，Person 就是一个构造函数，我们使用 new 创建了一个实例对象 person。\n很简单吧，接下来进入正题：")]),e._v(" "),o("h2",{attrs:{id:"prototype"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#prototype"}},[e._v("#")]),e._v(" prototype")]),e._v(" "),o("p",[e._v("每个函数都有一个 prototype 属性，就是我们经常在各种例子中看到的那个 prototype ，比如：\nfunction Person() {")]),e._v(" "),o("p",[e._v("}\n// 虽然写在注释里，但是你要注意：\n// prototype是函数才会有的属性\nPerson.prototype.name = 'Kevin';\nvar person1 = new Person();\nvar person2 = new Person();\nconsole.log(person1.name) // Kevin\nconsole.log(person2.name) // Kevin\n那这个函数的 prototype 属性到底指向的是什么呢？是这个函数的原型吗？\n其实，函数的 prototype 属性指向了一个对象，这个对象正是调用该构造函数而创建的"),o("strong",[e._v("实例")]),e._v('的原型，也就是这个例子中的 person1 和 person2 的原型。\n那什么是原型呢？你可以这样理解：每一个JavaScript对象(null除外)在创建的时候就会与之关联另一个对象，这个对象就是我们所说的原型，每一个对象都会从原型"继承"属性。\n让我们用一张图表示构造函数和实例原型之间的关系：\n'),o("img",{attrs:{src:"/notes/note_images/8D3CDE99-D944-4522-94B6-9F41CF3C86DF-82532-00013AD857274424/401e1f58a1f635a3f8a8b5882b045ccf.png",alt:"68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f6d717971696e6766656e672f426c6f672f496d616765732f70726f746f74797065312e706e67.png"}}),e._v("\n在这张图中我们用 Object.prototype 表示实例原型。\n那么我们该怎么表示实例与实例原型，也就是 person 和 Person.prototype 之间的关系呢，这时候我们就要讲到第二个属性：")]),e._v(" "),o("h2",{attrs:{id:"proto"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#proto"}},[e._v("#")]),e._v(" "),o("strong",[e._v("proto")])]),e._v(" "),o("p",[e._v("这是每一个JavaScript对象(除了 null )都具有的一个属性，叫__proto__，这个属性会指向该对象的原型。\n为了证明这一点,我们可以在火狐或者谷歌中输入：\nfunction Person() {")]),e._v(" "),o("p",[e._v("}\nvar person = new Person();\nconsole.log(person."),o("strong",[e._v("proto")]),e._v(" === Person.prototype); // true\n于是我们更新下关系图：\n"),o("img",{attrs:{src:"/notes/note_images/C7B089B7-D088-4529-B972-00AD6FDF5DD5-82532-00013AD856F1A5AA/c43fdf7c2260083437e70cd57df180f8.png",alt:"68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f6d717971696e6766656e672f426c6f672f496d616765732f70726f746f74797065322e706e67.png"}}),e._v("\n既然实例对象和构造函数都可以指向原型，那么原型是否有属性指向构造函数或者实例呢？")]),e._v(" "),o("h2",{attrs:{id:"constructor"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#constructor"}},[e._v("#")]),e._v(" constructor")]),e._v(" "),o("p",[e._v("指向实例倒是没有，因为一个构造函数可以生成多个实例，但是原型指向构造函数倒是有的，这就要讲到第三个属性：constructor，每个原型都有一个 constructor 属性指向关联的构造函数。\n为了验证这一点，我们可以尝试：\nfunction Person() {")]),e._v(" "),o("p",[e._v("}\nconsole.log(Person === Person.prototype.constructor); // true\n所以再更新下关系图：\n"),o("img",{attrs:{src:"/notes/note_images/E0F6BA68-F6AC-4EE9-987B-EBE05916AF88-82532-00013AD856B9EDA2/9a187328d90a4667f0c3dafb9cbba8f3.png",alt:"68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f6d717971696e6766656e672f426c6f672f496d616765732f70726f746f74797065332e706e67.png"}}),e._v("\n综上我们已经得出：\nfunction Person() {")]),e._v(" "),o("p",[e._v("}")]),e._v(" "),o("p",[e._v("var person = new Person();")]),e._v(" "),o("p",[e._v("console.log(person."),o("strong",[e._v("proto")]),e._v(" == Person.prototype) // true\nconsole.log(Person.prototype.constructor == Person) // true\n// 顺便学习一个ES5的方法,可以获得对象的原型\nconsole.log(Object.getPrototypeOf(person) === Person.prototype) // true\n了解了构造函数、实例原型、和实例之间的关系，接下来我们讲讲实例和原型的关系：")]),e._v(" "),o("h2",{attrs:{id:"实例与原型"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#实例与原型"}},[e._v("#")]),e._v(" 实例与原型")]),e._v(" "),o("p",[e._v("当读取实例的属性时，如果找不到，就会查找与对象关联的原型中的属性，如果还查不到，就去找原型的原型，一直找到最顶层为止。\n举个例子：\nfunction Person() {")]),e._v(" "),o("p",[e._v("}")]),e._v(" "),o("p",[e._v("Person.prototype.name = 'Kevin';")]),e._v(" "),o("p",[e._v("var person = new Person();")]),e._v(" "),o("p",[e._v("person.name = 'Daisy';\nconsole.log(person.name) // Daisy")]),e._v(" "),o("p",[e._v("delete person.name;\nconsole.log(person.name) // Kevin\n在这个例子中，我们给实例对象 person 添加了 name 属性，当我们打印 person.name 的时候，结果自然为 Daisy。\n但是当我们删除了 person 的 name 属性时，读取 person.name，从 person 对象中找不到 name 属性就会从 person 的原型也就是 person."),o("strong",[e._v("proto")]),e._v(" ，也就是 Person.prototype中查找，幸运的是我们找到了 name 属性，结果为 Kevin。\n但是万一还没有找到呢？原型的原型又是什么呢？")]),e._v(" "),o("h2",{attrs:{id:"原型的原型"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#原型的原型"}},[e._v("#")]),e._v(" 原型的原型")]),e._v(" "),o("p",[e._v("在前面，我们已经讲了原型也是一个对象，既然是对象，我们就可以用最原始的方式创建它，那就是：\nvar obj = new Object();\nobj.name = 'Kevin'\nconsole.log(obj.name) // Kevin\n其实原型对象就是通过 Object 构造函数生成的，结合之前所讲，实例的 "),o("strong",[e._v("proto")]),e._v(" 指向构造函数的 prototype ，所以我们再更新下关系图：\n"),o("img",{attrs:{src:"/notes/note_images/24622FA2-08E4-44AD-AC4A-FAA5D8FECD07-82532-00013AD856672F6B/f98705b4a9d1df901d0d1c3db1d172ed.png",alt:"68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f6d717971696e6766656e672f426c6f672f496d616765732f70726f746f74797065342e706e67.png"}})]),e._v(" "),o("h2",{attrs:{id:"原型链"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#原型链"}},[e._v("#")]),e._v(" 原型链")]),e._v(" "),o("p",[e._v("那 Object.prototype 的原型呢？\nnull，我们可以打印：\nconsole.log(Object.prototype."),o("strong",[e._v("proto")]),e._v(" === null) // true\n然而 null 究竟代表了什么呢？\n引用阮一峰老师的  "),o("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2014/03/undefined-vs-null.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("《undefined与null的区别》"),o("OutboundLink")],1),e._v("  就是：\nnull 表示“没有对象”，即该处不应该有值。\n所以 Object.prototype."),o("strong",[e._v("proto")]),e._v(" 的值为 null 跟 Object.prototype 没有原型，其实表达了一个意思。\n所以查找属性的时候查到 Object.prototype 就可以停止查找了。\n最后一张关系图也可以更新为：\n"),o("img",{attrs:{src:"/notes/note_images/CAF82B30-626B-464E-BD57-390E2BD061ED-82532-00013AD85625EA9D/63a8316c1c9b93392a5efc7377f97170.png",alt:"68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f6d717971696e6766656e672f426c6f672f496d616765732f70726f746f74797065352e706e67.png"}}),e._v("\n顺便还要说一下，图中由相互关联的原型组成的链状结构就是原型链，也就是蓝色的这条线。")]),e._v(" "),o("h2",{attrs:{id:"补充"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#补充"}},[e._v("#")]),e._v(" 补充")]),e._v(" "),o("p",[e._v("最后，补充三点大家可能不会注意的地方：")]),e._v(" "),o("h3",{attrs:{id:"constructor-2"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#constructor-2"}},[e._v("#")]),e._v(" constructor")]),e._v(" "),o("p",[e._v("首先是 constructor 属性，我们看个例子：\nfunction Person() {")]),e._v(" "),o("p",[e._v("}\nvar person = new Person();\nconsole.log(person.constructor === Person); // true\n当获取 person.constructor 时，其实 person 中并没有 constructor 属性,当不能读取到constructor 属性时，会从 person 的原型也就是 Person.prototype 中读取，正好原型中有该属性，所以：\nperson.constructor === Person.prototype.constructor")]),e._v(" "),o("h3",{attrs:{id:"proto-2"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#proto-2"}},[e._v("#")]),e._v(" "),o("strong",[e._v("proto")])]),e._v(" "),o("p",[e._v("其次是 "),o("strong",[e._v("proto")]),e._v(" ，绝大部分浏览器都支持这个非标准的方法访问原型，然而它并不存在于 Person.prototype 中，实际上，它是来自于 Object.prototype ，与其说是一个属性，不如说是一个 getter/setter，当使用 obj."),o("strong",[e._v("proto")]),e._v(" 时，可以理解成返回了 Object.getPrototypeOf(obj)。")]),e._v(" "),o("h3",{attrs:{id:"真的是继承吗"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#真的是继承吗"}},[e._v("#")]),e._v(" 真的是继承吗？")]),e._v(" "),o("p",[e._v("最后是关于继承，前面我们讲到“每一个对象都会从原型‘继承’属性”，实际上，继承是一个十分具有迷惑性的说法，引用《你不知道的JavaScript》中的话，就是：\n继承意味着复制操作，然而 JavaScript 默认并不会复制对象的属性，相反，JavaScript 只是在两个对象之间创建一个关联，这样，一个对象就可以通过委托访问另一个对象的属性和函数，所以与其叫继承，委托的说法反而更准确些。")])])}),[],!1,null,null,null);n.default=r.exports}}]);